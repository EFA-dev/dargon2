name: dargon2_flutter

on:
  push:
  pull_request:

defaults:
  run:
    working-directory: dargon2_flutter/dargon2_flutter/example

jobs:
  test_android:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}
      - name: AVD cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-30
      - name: Download Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - name: Upgrade flutter
        run: flutter upgrade
      - name: Run Integration Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          ndk: 21.3.6528147
          cmake: 3.18.1
          target: google_apis
          force-avd-creation: false
          working-directory: dargon2_flutter/dargon2_flutter/example
          script: flutter test integration_test/

  test_ios:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Download Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - name: Upgrade flutter
        run: flutter upgrade
      - name: List Simulators
        run: xcrun simctl list devices
      - name: Start Simulator
        run: |
          UDID=$(
          xcrun simctl list devices | grep "iPhone 13 (" | awk -F"[()]" '{print $2}' | awk 'NR==1{print $1}'
          )
          xcrun simctl boot "${UDID:?No Simulator with this name found}"
      - name: Run Integration Tests
        run: flutter test integration_test/

  test_desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        include:
          - os: macos-latest
            FLUTTER_DEVICE: macos
          - os: ubuntu-latest
            FLUTTER_DEVICE: linux
          - os: windows-latest
            FLUTTER_DEVICE: windows
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Download Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - name: Enable Flutter Desktop
        run: |
          flutter config --enable-linux-desktop
          flutter config --enable-macos-desktop
          flutter config --enable-windows-desktop
      - if: matrix.os == ubuntu-latest
        name: Install build-essential (Ubuntu Only)
        run: sudo apt install build-essential
      - name: Run Integration Tests
        run: flutter test -d ${{ matrix.FLUTTER_DEVICE }} integration_test/

